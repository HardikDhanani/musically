package com.reactlibrary;

import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.Callback;

import android.content.ContentResolver;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.annotation.Nullable;
import android.util.Log;

import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;

import wseemann.media.FFmpegMediaMetadataRetriever;

import com.facebook.react.modules.core.DeviceEventManagerModule;
import com.reactlibrary.ReactNativeFileManager;

import org.farng.mp3.MP3File;

public class RNReactNativeGetMusicFilesModule extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private boolean getBluredImages = false;
    private boolean getArtistFromSong = false;
    private boolean getDurationFromSong = true;
    private boolean getTitleFromSong = true;
    private boolean getIDFromSong = false;
    private boolean getCoverFromSong = false;
    private boolean getGenreFromSong = false;
    private boolean getAlbumFromSong = true;
    private boolean getDateFromSong = false;
    private boolean getCommentsFromSong = false;
    private boolean getLyricsFromSong = false;
    private int minimumSongDuration = 0;
    private int songsPerIteration = 0;

    public RNReactNativeGetMusicFilesModule(ReactApplicationContext reactContext) {
        super(reactContext);
        this.reactContext = reactContext;
    }

    @Override
    public String getName() {
        return "RNReactNativeGetMusicFiles";
    }

    @ReactMethod
    public void getAll(ReadableMap options, final Callback errorCallback, final Callback successCallback) {

        if (options.getBoolean("blured")) {
            getBluredImages = options.getBoolean("blured");
        }

        if (options.hasKey("artist")) {
            getArtistFromSong = options.getBoolean("artist");
        }

        if (options.hasKey("duration")) {
            getDurationFromSong = options.getBoolean("duration");
        }

        if (options.hasKey("title")) {
            getTitleFromSong = options.getBoolean("title");
        }

        if (options.hasKey("id")) {
            getIDFromSong = options.getBoolean("id");
        }

        if (options.hasKey("cover")) {
            getCoverFromSong = options.getBoolean("cover");
        }

        if (options.hasKey("genre")) {
            getGenreFromSong = options.getBoolean("genre");
        }

        if (options.hasKey("album")) {
            getAlbumFromSong = options.getBoolean("album");
        }

        if (options.hasKey("date")) {
            getDateFromSong = options.getBoolean("date");
        }

        if (options.hasKey("comments")) {
            getCommentsFromSong = options.getBoolean("comments");
        }

        if (options.hasKey("lyrics")) {
            getLyricsFromSong = options.getBoolean("lyrics");
        }

        if (options.hasKey("batchNumber")) {
            songsPerIteration = options.getInt("batchNumber");
        }

        int optionMinimumDuration = options.getInt("minimumSongDuration");

        if (optionMinimumDuration > 0) {
            minimumSongDuration = optionMinimumDuration;
        } else {
            minimumSongDuration = 10000;
        }

        Thread bgThread = new Thread(null, new Runnable() {
            @Override
            public void run() {
                ReactNativeFileManager fcm = new ReactNativeFileManager();
                ContentResolver musicResolver = getCurrentActivity().getContentResolver();
                Uri musicUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
                String selection = MediaStore.Audio.Media.IS_MUSIC + "!= 0";
                String sortOrder = MediaStore.Audio.Media.TITLE + " ASC";
                Cursor musicCursor = musicResolver.query(musicUri, null, selection, null, sortOrder);

                // int pointer = 0;
                int processedSongs = 0;

                if (musicCursor != null && musicCursor.moveToFirst()) {

                    int totalSongs = musicCursor.getCount();
                    if (totalSongs > 0) {
                        WritableArray jsonArray = new WritableNativeArray();
                        WritableMap items;
                        WritableMap params = null;
                        FFmpegMediaMetadataRetriever mmr = new FFmpegMediaMetadataRetriever();

                        int idColumn = musicCursor.getColumnIndex(android.provider.MediaStore.Audio.Media._ID);

                        try {
                            do {
                                try {
                                    items = new WritableNativeMap();

                                    long songId = musicCursor.getLong(idColumn);

                                    if (getIDFromSong) {
                                        String str = String.valueOf(songId);
                                        items.putString("id", str);
                                    }

                                    String songPath = musicCursor
                                            .getString(musicCursor.getColumnIndexOrThrow(MediaStore.Audio.Media.DATA));
                                    // MP3File mp3file = new MP3File(songPath);

                                    if (songPath != null && songPath != "") {

                                        String fileName = songPath.substring(songPath.lastIndexOf("/") + 1);

                                        //by default, always return path and fileName
                                        items.putString("path", songPath);
                                        items.putString("fileName", fileName);

                                        mmr.setDataSource(songPath);

                                        String songTimeDuration = mmr
                                                .extractMetadata(FFmpegMediaMetadataRetriever.METADATA_KEY_DURATION);
                                        int songIntDuration = Integer.parseInt(songTimeDuration);

                                        if (getAlbumFromSong) {
                                            //String songAlbum = mmr.extractMetadata(MediaMetadataRetriever.METADATA_KEY_ALBUM);
                                            String songAlbum = mmr
                                                    .extractMetadata(FFmpegMediaMetadataRetriever.METADATA_KEY_ALBUM);
                                            items.putString("album", songAlbum);
                                        }

                                        if (getArtistFromSong) {
                                            //String songArtist = mmr.extractMetadata(MediaMetadataRetriever.METADATA_KEY_ARTIST);
                                            String songArtist = mmr
                                                    .extractMetadata(FFmpegMediaMetadataRetriever.METADATA_KEY_ARTIST);
                                            items.putString("artist", songArtist);
                                        }

                                        if (getTitleFromSong) {
                                            //String songTitle = mmr.extractMetadata(MediaMetadataRetriever.METADATA_KEY_TITLE);
                                            String songTitle = mmr
                                                    .extractMetadata(FFmpegMediaMetadataRetriever.METADATA_KEY_TITLE);
                                            items.putString("title", songTitle);
                                        }

                                        if (getDurationFromSong) {
                                            //musicCursor.getString(musicCursor.getColumnIndex(MediaStore.Audio.Media.DURATION));
                                            items.putString("duration", songTimeDuration);
                                        }

                                        if (getCommentsFromSong) {
                                            items.putString("comments", mmr.extractMetadata(
                                                    FFmpegMediaMetadataRetriever.METADATA_KEY_COMMENT));
                                        }

                                        if (getDateFromSong) {
                                            items.putString("date", mmr
                                                    .extractMetadata(FFmpegMediaMetadataRetriever.METADATA_KEY_DATE));
                                        }

                                        // if (getLyricsFromSong) {
                                        //     String lyrics = mp3file.getID3v2Tag().getSongLyric();
                                        //     items.putString("lyrics", lyrics);
                                        // }

                                        if (getCoverFromSong) {

                                            // ReactNativeFileManager fcm = new ReactNativeFileManager();

                                            String encoded = "";
                                            String blurred = "";
                                            byte[] albumImageData = mmr.getEmbeddedPicture();

                                            if (albumImageData != null) {
                                                Bitmap songImage = BitmapFactory.decodeByteArray(albumImageData, 0,
                                                        albumImageData.length);

                                                try {
                                                    String pathToImg = Environment.getExternalStorageDirectory() + "/"
                                                            + songId + ".jpg";
                                                    encoded = fcm.saveImageToStorageAndGetPath(pathToImg, songImage);
                                                    items.putString("cover", "file://" + encoded);
                                                } catch (Exception e) {
                                                    // Just let images empty
                                                    Log.e("error in image", e.getMessage());
                                                }

                                                if (getBluredImages) {
                                                    try {
                                                        String pathToImg = Environment.getExternalStorageDirectory()
                                                                + "/" + songId + "-blur.jpg";
                                                        blurred = fcm.saveBlurImageToStorageAndGetPath(pathToImg,
                                                                songImage);
                                                        items.putString("blur", "file://" + blurred);
                                                    } catch (Exception e) {
                                                        Log.e("error in image-blured", e.getMessage());
                                                    }
                                                }
                                            }
                                        }

                                        jsonArray.pushMap(items);
                                        processedSongs++;

                                        if (songsPerIteration > 0 && songsPerIteration == jsonArray.size()) {
                                            params = Arguments.createMap();
                                            params.putArray("batch", jsonArray);
                                            params.putInt("total", totalSongs);
                                            params.putInt("current", processedSongs);
                                            sendEvent(reactContext, "onBatchReceived", params);
                                            jsonArray = new WritableNativeArray();
                                        }
                                    }
                                } catch (Exception e) {
                                    // An error in one message should not prevent from getting the rest
                                    // There are cases when a corrupted file can't be read and a RuntimeException is raised

                                    // Let's discuss how to deal with these kind of exceptions
                                    // This song will be ignored, and incremented the pointer in order to this plugin work
                                    // pointer++;
                                    processedSongs++;

                                    continue; // This is redundant, but adds meaning
                                }

                            } while (musicCursor.moveToNext());

                            if (songsPerIteration > 0 && jsonArray.size() > 0) {
                                params = Arguments.createMap();
                                params.putArray("batch", jsonArray);
                                params.putInt("total", totalSongs);
                                params.putInt("current", processedSongs);
                                sendEvent(reactContext, "onBatchReceived", params);
                            }

                            params = Arguments.createMap();
                            params.putInt("total", totalSongs);

                            if (songsPerIteration == 0) {
                                params.putArray("batch", jsonArray);
                                successCallback.invoke(params);
                            } else {
                                successCallback.invoke(params);
                            }

                        } catch (RuntimeException e) {
                            errorCallback.invoke(e.toString());
                        } catch (Exception e) {
                            // TODO Auto-generated catch block
                            errorCallback.invoke(e.getMessage());
                        } finally {
                            mmr.release();
                            mmr = null;
                        }
                    }
                }

            }
        }, "asyncTask", 1024);

        bgThread.start();
    }

    @ReactMethod
    public void getCovers(final ReadableArray ids, final Callback errorCallback, final Callback successCallback) {

        if (ids == null || ids.size() == 0) {
            successCallback.invoke(new WritableNativeArray());
        }

        Thread bgThread = new Thread(null, new Runnable() {
            @Override
            public void run() {
                ReactNativeFileManager fcm = new ReactNativeFileManager();
                ContentResolver musicResolver = getCurrentActivity().getContentResolver();
                Uri musicUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
                String selection = MediaStore.Audio.Media.IS_MUSIC + "!= 0";

                for (int i = 0; i < ids.size(); i++) {
                    selection = selection + " AND " + MediaStore.Audio.Media._ID + "=" + ids.getString(i);
                }

                Cursor musicCursor = musicResolver.query(musicUri, null, selection, null, null);

                if (musicCursor != null && musicCursor.moveToFirst()) {

                    if (musicCursor.getCount() > 0) {
                        WritableArray jsonArray = new WritableNativeArray();
                        FFmpegMediaMetadataRetriever mmr = new FFmpegMediaMetadataRetriever();

                        int idColumn = musicCursor.getColumnIndex(android.provider.MediaStore.Audio.Media._ID);

                        try {
                            do {
                                try {

                                    long songId = musicCursor.getLong(idColumn);
                                    String songPath = musicCursor.getString(musicCursor.getColumnIndexOrThrow(MediaStore.Audio.Media.DATA));

                                    if (songPath != null && songPath != "") {

                                        mmr.setDataSource(songPath);

                                        byte[] albumImageData = mmr.getEmbeddedPicture();
                                        if (albumImageData != null) {
                                            Bitmap songImage = BitmapFactory.decodeByteArray(albumImageData, 0,albumImageData.length);

                                            String pathToImg = Environment.getExternalStorageDirectory() + "/"+ songId + ".jpg";
                                            jsonArray.pushString("file://" + fcm.saveImageToStorageAndGetPath(pathToImg, songImage));
                                        }
                                    }
                                } catch (Exception e) {
                                    continue;
                                }

                            } while (musicCursor.moveToNext());

                            successCallback.invoke(jsonArray);

                        } catch (Exception e) {
                            errorCallback.invoke(e.getMessage());
                        } finally {
                            mmr.release();
                            mmr = null;
                        }
                    }
                }
            }
        }, "asyncTask", 1024);

        bgThread.start();
    }

    private void sendEvent(ReactContext reactContext, String eventName, @Nullable WritableMap params) {
        reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class).emit(eventName, params);
    }
}